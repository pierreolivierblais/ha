blueprint:
  name: Lutron Pico 5 Button - Custom Press Control
  description: "This blueprint provides custom handling for long press and double press on the middle button of a Lutron Pico 5 Button remote, utilizing timers to differentiate press types."
  domain: automation
  input:
    pico_1:
      name: Pico Device
      description: "Pico remote to associate with light entity."
    entity:
      name: Light Entity(ies)
      description: "Light entity to control."
      selector:
        entity:
          domain: light
          multiple: true
    transition_on:
      name: On Transition
      description: "The duration in seconds for the light entity to transition on."
      selector:
        number:
          min: 0
          max: 15
          unit_of_measurement: seconds
      default: 1
    transition_off:
      name: Off Transition
      description: "The duration in seconds for the light entity to transition off."
      selector:
        number:
          min: 0
          max: 15
          unit_of_measurement: seconds
      default: 2
    middle_button_long_press_delay:
      name: Middle Button Long Press Delay
      description: "Delay in milliseconds to recognize a long press on the middle button."
      selector:
        number:
          min: 500
          max: 5000
          unit_of_measurement: milliseconds
      default: 1000
    middle_button_double_press_delay:
      name: Middle Button Double Press Delay
      description: "Maximum delay between presses to recognize a double press on the middle button."
      selector:
        number:
          min: 50
          max: 1000
          unit_of_measurement: milliseconds
      default: 500

trigger:
  - platform: device
    device_id: !input pico_1
    domain: lutron_caseta
    type: press
    subtype: 'middle'
    id: middle_pressed

action:
  - variables:
      timer_entity_id: "timer.middle_button_timer"
  - choose:
      - conditions:
          - condition: state
            entity_id: !input timer_entity_id
            state: 'active'
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_entity_id
          - service: light.toggle
            target:
              entity_id: !input entity
      default:
        - service: timer.start
          target:
            entity_id: !input timer_entity_id
          data:
            duration: "{{ states('input_number.middle_button_double_press_delay') | int / 1000 }}"
        - delay:
            milliseconds: "{{ states('input_number.middle_button_long_press_delay') | int }}"
        - choose:
            - conditions:
                - condition: state
                  entity_id: !input timer_entity_id
                  state: 'idle'
              sequence:
                - service: light.turn_on
                  target:
                    entity_id: !input entity
                  data:
                    brightness_pct: 50
            default:
              - service: light.turn_on
                target:
                  entity_id: !input entity
                data:
                  brightness_pct: 20

mode: restart
