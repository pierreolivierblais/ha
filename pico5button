blueprint:
  name: Lutron Pico Middle Button - Long Press and Double Press
  description: "This blueprint handles long press and double press functionalities for the middle button of a Lutron Pico 5 Button remote, using timers to differentiate press types."
  domain: automation
  input:
    pico_1:
      name: Pico Device
      description: "Pico remote to associate with these actions."
      selector:
        device:
          integration: lutron_caseta
          manufacturer: Lutron
    middle_button_long_press_action:
      name: Long Press Action
      description: "Action(s) to execute when the middle button is long pressed."
      selector:
        action: {}
    middle_button_double_press_action:
      name: Double Press Action
      description: "Action(s) to execute when the middle button is double pressed."
      selector:
        action: {}
    middle_button_long_press_delay:
      name: Long Press Delay
      description: "Delay in milliseconds to recognize a long press on the middle button."
      selector:
        number:
          min: 500
          max: 5000
          unit_of_measurement: milliseconds
      default: 1000
    middle_button_double_press_delay:
      name: Double Press Delay
      description: "Maximum delay between presses to recognize a double press on the middle button."
      selector:
        number:
          min: 50
          max: 1000
          unit_of_measurement: milliseconds
      default: 500

trigger:
  - platform: device
    device_id: !input pico_1
    domain: lutron_caseta
    type: press
    subtype: 'middle'
    id: middle_pressed

action:
  - variables:
      timer_entity_id: "timer.middle_button_timer"
  - choose:
      - conditions:
          - condition: state
            entity_id: timer.middle_button_timer
            state: 'active'
        sequence:
          - service: timer.cancel
            target:
              entity_id: timer.middle_button_timer
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (now() - as_timestamp(states.timer.middle_button_timer.last_changed) | default(0)) * 1000 < states('input_number.middle_button_double_press_delay') | int }}"
                sequence: !input middle_button_double_press_action
      default:
        - service: timer.start
          target:
            entity_id: timer.middle_button_timer
          data:
            duration: "{{ (states('input_number.middle_button_double_press_delay') | int / 1000) | string }}"
        - delay:
            milliseconds: "{{ states('input_number.middle_button_long_press_delay') | int }}"
        - choose:
            - conditions:
                - condition: state
                  entity_id: timer.middle_button_timer
                  state: 'idle'
              sequence: !input middle_button_long_press_action
mode: restart
